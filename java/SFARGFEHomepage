(function() {
    'use strict';

    console.log('TamperMonkey script started');

    function performSearch() {
        console.log('Attempting to find the search input...');
        // Target the search input field
        const searchInput = document.querySelector('#search-landing');
        if (searchInput) {
            console.log('Search input found:', searchInput);

            // Focus on the search input
            searchInput.focus();

            // Set the value of the input directly
            searchInput.value = 'SFARGFE';

            // Manually create and dispatch the input event
            const inputEvent = new Event('input', { bubbles: true });
            searchInput.dispatchEvent(inputEvent);

            // Manually create and dispatch the change event
            const changeEvent = new Event('change', { bubbles: true });
            searchInput.dispatchEvent(changeEvent);

            console.log('Entered text into search input');

            // Simulate pressing the Enter key
            const enterEvent = new KeyboardEvent('keydown', { key: 'Enter', bubbles: true });
            searchInput.dispatchEvent(enterEvent);
            searchInput.dispatchEvent(new KeyboardEvent('keypress', { key: 'Enter', bubbles: true }));
            searchInput.dispatchEvent(new KeyboardEvent('keyup', { key: 'Enter', bubbles: true }));

            console.log('Simulated Enter key press');

            // Wait for search results to load and click the result
            waitForElement('#SearchResult .searchItem[data-name="SFARGFE"]', (resultElement) => {
                console.log('Search result found:', resultElement);
                resultElement.click();
            });
        } else {
            console.error('Search input not found');
        }
    }

    // Function to wait for a specific element to be available
    function waitForElement(selector, callback) {
        console.log(`Waiting for element with selector: ${selector}`);
        const checkExist = setInterval(() => {
            const element = document.querySelector(selector);
            if (element) {
                console.log(`Element found: ${selector}`, element);
                clearInterval(checkExist);
                callback(element);
            } else {
                console.log(`Element not found yet: ${selector}`);
            }
        }, 100);

        // Also use MutationObserver as a fallback
        const observer = new MutationObserver(() => {
            try {
                const element = document.querySelector(selector);
                if (element) {
                    console.log(`Element found by MutationObserver: ${selector}`, element);
                    observer.disconnect();
                    clearInterval(checkExist);
                    callback(element);
                }
            } catch (error) {
                console.error('Error querying selector:', selector, error);
            }
        });
        observer.observe(document.body, { childList: true, subtree: true });
    }

    // Wait for 2 seconds before executing the search action
    setTimeout(() => {
        performSearch();
    }, 2000); // 2-second delay

    console.log('Script execution delayed for 2 seconds');
})();
