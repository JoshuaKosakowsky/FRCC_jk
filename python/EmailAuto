import os
import pandas as pd
from exchangelib import DELEGATE, Account, Credentials, FileAttachment, HTMLBody
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

# Function to download email attachment from Outlook
def download_email_attachment_outlook(email_user, email_pass, subject_filter, download_path):
    credentials = Credentials(email_user, email_pass)
    account = Account(email_user, credentials=credentials, autodiscover=True, access_type=DELEGATE)

    for item in account.inbox.filter(subject__contains=subject_filter).order_by('-datetime_received')[:1]:
        for attachment in item.attachments:
            if isinstance(attachment, FileAttachment):
                local_path = os.path.join(download_path, attachment.name)
                with open(local_path, 'wb') as f:
                    f.write(attachment.content)
                print(f'Saved attachment to {local_path}')
                return local_path

# Function to unlock and read the Excel file
def read_locked_excel(file_path, password):
    xl = pd.ExcelFile(file_path, engine='openpyxl', storage_options={'password': password})
    df = xl.parse(sheet_name=xl.sheet_names[0])
    return df

# Function to automate website interaction
def automate_website(ids, download_path):
    options = webdriver.ChromeOptions()
    prefs = {"download.default_directory": download_path}
    options.add_experimental_option("prefs", prefs)

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.get("https://website.com/login")

    # Perform login (example, replace with actual login logic)
    username = driver.find_element(By.NAME, "username")
    password = driver.find_element(By.NAME, "password")
    username.send_keys("your_username")
    password.send_keys("your_password")
    password.send_keys(Keys.RETURN)

    # Navigate to upload page and upload IDs (example, replace with actual upload logic)
    upload_field = driver.find_element(By.ID, "upload_field")
    for id in ids:
        upload_field.send_keys(id)
        # Perform the upload action here

    # Wait for download to complete
    driver.quit()

# Function to process the downloaded data
def process_downloaded_data(file_path):
    df = pd.read_excel(file_path)
    filtered_df = df[df['some_column'] == 'some_value']  # Replace with actual filtering logic
    filtered_df.to_excel('/path/to/save/final_output.xlsx', index=False)

# Main function to run the entire process
def main():
    # Download email attachment from Outlook
    download_path = '/path/to/save/attachment'
    email_user = 'your_email@company.com'
    email_pass = 'your_password'
    subject_filter = 'Weekly Report'
    file_path = download_email_attachment_outlook(email_user, email_pass, subject_filter, download_path)
    
    # Read the downloaded locked Excel file
    df = read_locked_excel(file_path, 'your_password')
    
    # Filter data and extract IDs
    ids = df['ID'].tolist()  # Replace with actual filtering logic

    # Automate website interaction and download the resulting file
    automate_website(ids, '/path/to/download/directory')

    # Process the downloaded data
    process_downloaded_data('/path/to/download/directory/resulting_file.xlsx')

if __name__ == "__main__":
    main()
