async function main(context: Excel.RequestContext) {
    const sheet = context.workbook.worksheets.getActiveWorksheet();

    sheet.getUsedRange().unmerge();

    sheet.getRange("1:2").delete(Excel.DeleteShiftDirection.up);

    const columnB = sheet.getRange("B:B");
    columnB.replaceAll(" *", "", { matchCase: false, completeMatch: false });
    columnB.replaceAll(",", "", { matchCase: false, completeMatch: false });

    columnB.numberFormat = [["m/d/yyyy"]];

    const columnG = sheet.getRange("G:G");
    columnG.replaceAll("C", "Credit", { completeMatch: true });
    columnG.replaceAll("D", "Debit", { completeMatch: true });

    const lastRow = sheet.getUsedRange().getLastRow().load("rowIndex");
    await context.sync();
    const columnH = sheet.getRange("H2:H" + lastRow.rowIndex);
    columnH.formulasR1C1 = [[`=IF(RC[-1]="Credit",-RC[-2],RC[-2])`]];
    sheet.getRange("H1").values = [["Amt"]];

    columnH.copyFrom(columnH, Excel.RangeCopyType.values, false, false);
    sheet.getRange("F:F").numberFormat = [['_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)']];

    sheet.getRange("H:H").delete(Excel.DeleteShiftDirection.left);

    const usedRange = sheet.getUsedRange();
    usedRange.load("address");
    await context.sync();
    usedRange.sort.apply(
        [
            {
                key: 1,
                ascending: true
            }
        ],
        {
            matchCase: false,
            sortBy: Excel.SortBy.pinYin
        }
    );

    columnB.getEntireColumn().autoFit();
}
